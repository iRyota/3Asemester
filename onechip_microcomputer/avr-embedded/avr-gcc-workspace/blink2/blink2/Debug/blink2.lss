
blink2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000028  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000d1  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000008c  00000000  00000000  00000279  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000dd  00000000  00000000  00000305  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000044  00000000  00000000  000003e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000012c  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000048  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000018  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6f 00 	call	0xde	; 0xde <main>
  78:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <mywait>:
 */ 


#include <avr/io.h>

void mywait(){
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	00 d0       	rcall	.+0      	; 0x86 <mywait+0x6>
  86:	00 d0       	rcall	.+0      	; 0x88 <mywait+0x8>
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
	volatile int i;
	volatile int j;
	for(i = 0; i < 2000; i++) {
  8c:	1a 82       	std	Y+2, r1	; 0x02
  8e:	19 82       	std	Y+1, r1	; 0x01
  90:	89 81       	ldd	r24, Y+1	; 0x01
  92:	9a 81       	ldd	r25, Y+2	; 0x02
  94:	80 3d       	cpi	r24, 0xD0	; 208
  96:	97 40       	sbci	r25, 0x07	; 7
  98:	dc f4       	brge	.+54     	; 0xd0 <mywait+0x50>
		for(j = 0; j < 200; j++){}
  9a:	1c 82       	std	Y+4, r1	; 0x04
  9c:	1b 82       	std	Y+3, r1	; 0x03
  9e:	8b 81       	ldd	r24, Y+3	; 0x03
  a0:	9c 81       	ldd	r25, Y+4	; 0x04
  a2:	88 3c       	cpi	r24, 0xC8	; 200
  a4:	91 05       	cpc	r25, r1
  a6:	54 f4       	brge	.+20     	; 0xbc <mywait+0x3c>
  a8:	8b 81       	ldd	r24, Y+3	; 0x03
  aa:	9c 81       	ldd	r25, Y+4	; 0x04
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	9c 83       	std	Y+4, r25	; 0x04
  b0:	8b 83       	std	Y+3, r24	; 0x03
  b2:	8b 81       	ldd	r24, Y+3	; 0x03
  b4:	9c 81       	ldd	r25, Y+4	; 0x04
  b6:	88 3c       	cpi	r24, 0xC8	; 200
  b8:	91 05       	cpc	r25, r1
  ba:	b4 f3       	brlt	.-20     	; 0xa8 <mywait+0x28>
#include <avr/io.h>

void mywait(){
	volatile int i;
	volatile int j;
	for(i = 0; i < 2000; i++) {
  bc:	89 81       	ldd	r24, Y+1	; 0x01
  be:	9a 81       	ldd	r25, Y+2	; 0x02
  c0:	01 96       	adiw	r24, 0x01	; 1
  c2:	9a 83       	std	Y+2, r25	; 0x02
  c4:	89 83       	std	Y+1, r24	; 0x01
  c6:	89 81       	ldd	r24, Y+1	; 0x01
  c8:	9a 81       	ldd	r25, Y+2	; 0x02
  ca:	80 3d       	cpi	r24, 0xD0	; 208
  cc:	97 40       	sbci	r25, 0x07	; 7
  ce:	2c f3       	brlt	.-54     	; 0x9a <mywait+0x1a>
		for(j = 0; j < 200; j++){}
	}
}
  d0:	0f 90       	pop	r0
  d2:	0f 90       	pop	r0
  d4:	0f 90       	pop	r0
  d6:	0f 90       	pop	r0
  d8:	df 91       	pop	r29
  da:	cf 91       	pop	r28
  dc:	08 95       	ret

000000de <main>:

int main(void)
{
	DDRB = 0b11110000;
  de:	80 ef       	ldi	r24, 0xF0	; 240
  e0:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b11001111;
  e2:	8f ec       	ldi	r24, 0xCF	; 207
  e4:	85 b9       	out	0x05, r24	; 5
    while(1)
    {
		PORTB = 0b11101111;
  e6:	df ee       	ldi	r29, 0xEF	; 239
		mywait();
		PORTB = 0b11001111;
  e8:	cf ec       	ldi	r28, 0xCF	; 207
{
	DDRB = 0b11110000;
	PORTB = 0b11001111;
    while(1)
    {
		PORTB = 0b11101111;
  ea:	d5 b9       	out	0x05, r29	; 5
		mywait();
  ec:	0e 94 40 00 	call	0x80	; 0x80 <mywait>
		PORTB = 0b11001111;
  f0:	c5 b9       	out	0x05, r28	; 5
		mywait();
  f2:	0e 94 40 00 	call	0x80	; 0x80 <mywait>
  f6:	f9 cf       	rjmp	.-14     	; 0xea <main+0xc>

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
