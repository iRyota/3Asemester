
stmc1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000102  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000ee  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000008b  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000b5  00000000  00000000  000002cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000013b  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000070  00000000  00000000  000004df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  0000054f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 55 00 	jmp	0xaa	; 0xaa <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
{
	unsigned char on = _BV(PORTB5);
	unsigned char off = 0;
	int state = 0;

	DDRB = _BV(DDB5);
  80:	80 e2       	ldi	r24, 0x20	; 32
  82:	84 b9       	out	0x04, r24	; 4
	DDRD = 0;
  84:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0;
  86:	1b b8       	out	0x0b, r1	; 11

int main(int argc, char* argv[])
{
	unsigned char on = _BV(PORTB5);
	unsigned char off = 0;
	int state = 0;
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	90 e0       	ldi	r25, 0x00	; 0
	DDRD = 0;
	PORTD = 0;

	while (1) {
		if(bit_is_set(PIND, PIND5)){
			state = 1 - state;
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	30 e0       	ldi	r19, 0x00	; 0
		}

		if (state) {
			PORTB = on;
  90:	40 e2       	ldi	r20, 0x20	; 32
	DDRB = _BV(DDB5);
	DDRD = 0;
	PORTD = 0;

	while (1) {
		if(bit_is_set(PIND, PIND5)){
  92:	4d 9b       	sbis	0x09, 5	; 9
  94:	04 c0       	rjmp	.+8      	; 0x9e <main+0x1e>
			state = 1 - state;
  96:	b9 01       	movw	r22, r18
  98:	68 1b       	sub	r22, r24
  9a:	79 0b       	sbc	r23, r25
  9c:	cb 01       	movw	r24, r22
		}

		if (state) {
  9e:	00 97       	sbiw	r24, 0x00	; 0
  a0:	11 f0       	breq	.+4      	; 0xa6 <main+0x26>
			PORTB = on;
  a2:	45 b9       	out	0x05, r20	; 5
  a4:	f6 cf       	rjmp	.-20     	; 0x92 <main+0x12>
			} else {
			PORTB = off;
  a6:	15 b8       	out	0x05, r1	; 5
  a8:	f4 cf       	rjmp	.-24     	; 0x92 <main+0x12>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>
