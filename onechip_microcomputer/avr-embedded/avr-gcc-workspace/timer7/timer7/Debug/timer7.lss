
timer7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000038  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000143  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d6  00000000  00000000  000002bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000e9  00000000  00000000  00000395  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000054  00000000  00000000  00000480  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000164  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000006d  00000000  00000000  00000638  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  000006a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  78:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initialize_timer>:
}

void initialize_timer()
{
	//タイマーの設定
	TCCR1A = 0;//ノーマル動作を行わせる
  80:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = _BV(CS12) | _BV(CS10);  //1024分周比
  84:	85 e0       	ldi	r24, 0x05	; 5
  86:	80 93 81 00 	sts	0x0081, r24
	TCNT1 = 0;//カウンタ値の初期化
  8a:	10 92 85 00 	sts	0x0085, r1
  8e:	10 92 84 00 	sts	0x0084, r1
	TIMSK1 = 0; //割り込みは用いない
  92:	10 92 6f 00 	sts	0x006F, r1
  96:	08 95       	ret

00000098 <blink_leds>:
}

void blink_leds(unsigned char status)
{
	PORTB = (status >> 4) << 2;
  98:	82 95       	swap	r24
  9a:	8f 70       	andi	r24, 0x0F	; 15
  9c:	88 0f       	add	r24, r24
  9e:	88 0f       	add	r24, r24
  a0:	85 b9       	out	0x05, r24	; 5
  a2:	08 95       	ret

000000a4 <main>:

#include <avr/io.h>

void setup_io()
{
	DDRB = _BV(DDB5) | _BV(DDB4) | _BV(DDB3) | _BV(DDB2);
  a4:	8c e3       	ldi	r24, 0x3C	; 60
  a6:	84 b9       	out	0x04, r24	; 4

int main(int argc, char* argv[])
{
	
	setup_io();
	initialize_timer();
  a8:	0e 94 40 00 	call	0x80	; 0x80 <initialize_timer>


	while (1){
		blink_leds(TCNT1 / 256);
  ac:	c4 e8       	ldi	r28, 0x84	; 132
  ae:	d0 e0       	ldi	r29, 0x00	; 0
  b0:	88 81       	ld	r24, Y
  b2:	99 81       	ldd	r25, Y+1	; 0x01
  b4:	89 2f       	mov	r24, r25
  b6:	0e 94 4c 00 	call	0x98	; 0x98 <blink_leds>
  ba:	fa cf       	rjmp	.-12     	; 0xb0 <main+0xc>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
