
timer8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000120  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800100  00800100  00000194  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000175  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000108  00000000  00000000  00000379  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000f5  00000000  00000000  00000481  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000ac  00000000  00000000  00000578  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000176  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000138  00000000  00000000  0000079a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  000008d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 86 00 	call	0x10c	; 0x10c <main>
  88:	0c 94 8e 00 	jmp	0x11c	; 0x11c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initialize_timer>:
}

void initialize_timer()
{
	//タイマーの設定
	TCCR1A = 0;
  90:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = _BV(CS11); //8分周比
  94:	82 e0       	ldi	r24, 0x02	; 2
  96:	80 93 81 00 	sts	0x0081, r24
	TCNT1 = 0;//カウンタ値の初期化
  9a:	10 92 85 00 	sts	0x0085, r1
  9e:	10 92 84 00 	sts	0x0084, r1
	TIMSK1 = _BV(TOIE1);//オーバーフロー割り込み許可を設定
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	80 93 6f 00 	sts	0x006F, r24
  a8:	08 95       	ret

000000aa <blink_leds>:
}

void blink_leds(unsigned char status)
{
	PORTB = (status >> 4) << 2;
  aa:	82 95       	swap	r24
  ac:	8f 70       	andi	r24, 0x0F	; 15
  ae:	88 0f       	add	r24, r24
  b0:	88 0f       	add	r24, r24
  b2:	85 b9       	out	0x05, r24	; 5
  b4:	08 95       	ret

000000b6 <__vector_13>:

volatile unsigned char state;

//Timre0のオーバーフローにより発生する割り込みで行う関数
ISR(TIMER1_OVF_vect)
{
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
  c0:	2f 93       	push	r18
  c2:	3f 93       	push	r19
  c4:	4f 93       	push	r20
  c6:	5f 93       	push	r21
  c8:	6f 93       	push	r22
  ca:	7f 93       	push	r23
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
  d0:	af 93       	push	r26
  d2:	bf 93       	push	r27
  d4:	ef 93       	push	r30
  d6:	ff 93       	push	r31
	state++;
  d8:	80 91 00 01 	lds	r24, 0x0100
  dc:	8f 5f       	subi	r24, 0xFF	; 255
  de:	80 93 00 01 	sts	0x0100, r24
	blink_leds(state);
  e2:	80 91 00 01 	lds	r24, 0x0100
  e6:	0e 94 55 00 	call	0xaa	; 0xaa <blink_leds>

}
  ea:	ff 91       	pop	r31
  ec:	ef 91       	pop	r30
  ee:	bf 91       	pop	r27
  f0:	af 91       	pop	r26
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	7f 91       	pop	r23
  f8:	6f 91       	pop	r22
  fa:	5f 91       	pop	r21
  fc:	4f 91       	pop	r20
  fe:	3f 91       	pop	r19
 100:	2f 91       	pop	r18
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <main>:
#include <avr/io.h>
#include <avr/interrupt.h>

void setup_io()
{
	DDRB = _BV(DDB5) | _BV(DDB4) | _BV(DDB3) | _BV(DDB2);
 10c:	8c e3       	ldi	r24, 0x3C	; 60
 10e:	84 b9       	out	0x04, r24	; 4

int main(int argc, char* argv[])
{
	
	setup_io();
	initialize_timer();
 110:	0e 94 48 00 	call	0x90	; 0x90 <initialize_timer>

	state = 0;
 114:	10 92 00 01 	sts	0x0100, r1

	sei();//全割り込みの許可を行う
 118:	78 94       	sei
 11a:	ff cf       	rjmp	.-2      	; 0x11a <main+0xe>

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
