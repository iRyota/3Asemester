
timer6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800100  00800100  00000168  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000132  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000ec  00000000  00000000  00000302  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000ec  00000000  00000000  000003ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000064  00000000  00000000  000004dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000015b  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000088  00000000  00000000  0000069b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00000723  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  88:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initialize_timer>:
}

void initialize_timer()
{
	//タイマーの設定
	TCCR2A = _BV(COM2A1) | _BV(COM2A0) |_BV(WGM21) | _BV(WGM20);
  90:	83 ec       	ldi	r24, 0xC3	; 195
  92:	80 93 b0 00 	sts	0x00B0, r24
	OCR2A = 250;//OC2Aの出力状態を変える際の条件となるレジスタの設定
  96:	8a ef       	ldi	r24, 0xFA	; 250
  98:	80 93 b3 00 	sts	0x00B3, r24
	TCCR2B = _BV(CS21);
  9c:	82 e0       	ldi	r24, 0x02	; 2
  9e:	80 93 b1 00 	sts	0x00B1, r24
	TCNT2 = 0;
  a2:	10 92 b2 00 	sts	0x00B2, r1

	//タイマーの設定
	TCCR0A = 0;
  a6:	14 bc       	out	0x24, r1	; 36
	TCCR0B = _BV(CS01) | _BV(CS00);
  a8:	83 e0       	ldi	r24, 0x03	; 3
  aa:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;
  ac:	16 bc       	out	0x26, r1	; 38
	TIMSK0 = _BV(TOIE0);
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	80 93 6e 00 	sts	0x006E, r24
  b4:	08 95       	ret

000000b6 <__vector_16>:
}

volatile unsigned char state;

ISR(TIMER0_OVF_vect)
{
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
  c0:	8f 93       	push	r24
	state++;
  c2:	80 91 00 01 	lds	r24, 0x0100
  c6:	8f 5f       	subi	r24, 0xFF	; 255
  c8:	80 93 00 01 	sts	0x0100, r24
	OCR2A = state;
  cc:	80 91 00 01 	lds	r24, 0x0100
  d0:	80 93 b3 00 	sts	0x00B3, r24
	

}
  d4:	8f 91       	pop	r24
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <main>:
#include <avr/io.h>
#include <avr/interrupt.h>

void setup_io()
{
	DDRB = _BV(DDB3);
  e0:	88 e0       	ldi	r24, 0x08	; 8
  e2:	84 b9       	out	0x04, r24	; 4

int main(int argc, char* argv[])
{
	
	setup_io();
	initialize_timer();
  e4:	0e 94 48 00 	call	0x90	; 0x90 <initialize_timer>

	state = 0;
  e8:	10 92 00 01 	sts	0x0100, r1

	sei();
  ec:	78 94       	sei
  ee:	ff cf       	rjmp	.-2      	; 0xee <main+0xe>

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
