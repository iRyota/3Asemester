
adc2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000038  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000163  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000f6  00000000  00000000  000003c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000f6  00000000  00000000  000004b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  0000009c  00000000  00000000  000005b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000153  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000020a  00000000  00000000  0000079f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000040  00000000  00000000  000009a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__vector_21>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 a4 00 	call	0x148	; 0x148 <main>
  78:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setup>:
#include <avr/io.h>
#include <avr/interrupt.h>

void setup()
{
	DDRB = _BV(PB5) | _BV(PB4) | _BV(PB3) | _BV(PB2);
  80:	8c e3       	ldi	r24, 0x3C	; 60
  82:	84 b9       	out	0x04, r24	; 4
	ADCSRA = _BV(ADEN) | _BV(ADPS2)|_BV(ADATE)| _BV(ADIE);
  84:	ea e7       	ldi	r30, 0x7A	; 122
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	8c ea       	ldi	r24, 0xAC	; 172
  8a:	80 83       	st	Z, r24
	//AD変換を許容、プリスケーラの設定、オートトリガモード設定、AD変換割り込みの許可、
	ADCSRB &= 11111000 ;//トリガーソースなし（フリーランニングモード）
  8c:	ab e7       	ldi	r26, 0x7B	; 123
  8e:	b0 e0       	ldi	r27, 0x00	; 0
  90:	8c 91       	ld	r24, X
  92:	88 75       	andi	r24, 0x58	; 88
  94:	8c 93       	st	X, r24

	ADMUX = _BV(REFS0);//基準電圧の設定
  96:	80 e4       	ldi	r24, 0x40	; 64
  98:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= _BV(ADSC);//AD変換の開始
  9c:	80 81       	ld	r24, Z
  9e:	80 64       	ori	r24, 0x40	; 64
  a0:	80 83       	st	Z, r24
  a2:	08 95       	ret

000000a4 <output>:
}

void output(int n)
{
	int res = (n + 102) / 204;
  a4:	8a 59       	subi	r24, 0x9A	; 154
  a6:	9f 4f       	sbci	r25, 0xFF	; 255
  a8:	6c ec       	ldi	r22, 0xCC	; 204
  aa:	70 e0       	ldi	r23, 0x00	; 0
  ac:	0e 94 a8 00 	call	0x150	; 0x150 <__divmodhi4>
  b0:	cb 01       	movw	r24, r22

	if (res == 0) {
  b2:	00 97       	sbiw	r24, 0x00	; 0
  b4:	21 f0       	breq	.+8      	; 0xbe <output+0x1a>
		PORTB = 0;
		} else {
		int i = 0;
		int outcode = 0;
		for (i = 0; i < res; i++) {
  b6:	2c f4       	brge	.+10     	; 0xc2 <output+0x1e>
  b8:	20 e0       	ldi	r18, 0x00	; 0
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	1b c0       	rjmp	.+54     	; 0xf4 <output+0x50>
void output(int n)
{
	int res = (n + 102) / 204;

	if (res == 0) {
		PORTB = 0;
  be:	15 b8       	out	0x05, r1	; 5
  c0:	08 95       	ret
  c2:	61 50       	subi	r22, 0x01	; 1
  c4:	71 09       	sbc	r23, r1
		} else {
		int i = 0;
		int outcode = 0;
		for (i = 0; i < res; i++) {
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	9f ef       	ldi	r25, 0xFF	; 255
  ca:	20 e0       	ldi	r18, 0x00	; 0
  cc:	30 e0       	ldi	r19, 0x00	; 0
			outcode = outcode | (1 << (i - 1)) << 2;
  ce:	e1 e0       	ldi	r30, 0x01	; 1
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	af 01       	movw	r20, r30
  d4:	08 2e       	mov	r0, r24
  d6:	02 c0       	rjmp	.+4      	; 0xdc <output+0x38>
  d8:	44 0f       	add	r20, r20
  da:	55 1f       	adc	r21, r21
  dc:	0a 94       	dec	r0
  de:	e2 f7       	brpl	.-8      	; 0xd8 <output+0x34>
  e0:	44 0f       	add	r20, r20
  e2:	55 1f       	adc	r21, r21
  e4:	44 0f       	add	r20, r20
  e6:	55 1f       	adc	r21, r21
  e8:	24 2b       	or	r18, r20
  ea:	35 2b       	or	r19, r21
  ec:	01 96       	adiw	r24, 0x01	; 1
	if (res == 0) {
		PORTB = 0;
		} else {
		int i = 0;
		int outcode = 0;
		for (i = 0; i < res; i++) {
  ee:	86 17       	cp	r24, r22
  f0:	97 07       	cpc	r25, r23
  f2:	79 f7       	brne	.-34     	; 0xd2 <output+0x2e>
			outcode = outcode | (1 << (i - 1)) << 2;
		}
		PORTB = outcode;
  f4:	25 b9       	out	0x05, r18	; 5
  f6:	08 95       	ret

000000f8 <__vector_21>:
	}
}

ISR(ADC_vect)
{
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	2f 93       	push	r18
 104:	3f 93       	push	r19
 106:	4f 93       	push	r20
 108:	5f 93       	push	r21
 10a:	6f 93       	push	r22
 10c:	7f 93       	push	r23
 10e:	8f 93       	push	r24
 110:	9f 93       	push	r25
 112:	af 93       	push	r26
 114:	bf 93       	push	r27
 116:	ef 93       	push	r30
 118:	ff 93       	push	r31
	output(ADC);
 11a:	80 91 78 00 	lds	r24, 0x0078
 11e:	90 91 79 00 	lds	r25, 0x0079
 122:	0e 94 52 00 	call	0xa4	; 0xa4 <output>
}
 126:	ff 91       	pop	r31
 128:	ef 91       	pop	r30
 12a:	bf 91       	pop	r27
 12c:	af 91       	pop	r26
 12e:	9f 91       	pop	r25
 130:	8f 91       	pop	r24
 132:	7f 91       	pop	r23
 134:	6f 91       	pop	r22
 136:	5f 91       	pop	r21
 138:	4f 91       	pop	r20
 13a:	3f 91       	pop	r19
 13c:	2f 91       	pop	r18
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <main>:

int main(int argc, char* argv[])
{

	setup();
 148:	0e 94 40 00 	call	0x80	; 0x80 <setup>

	sei();
 14c:	78 94       	sei
 14e:	ff cf       	rjmp	.-2      	; 0x14e <main+0x6>

00000150 <__divmodhi4>:
 150:	97 fb       	bst	r25, 7
 152:	07 2e       	mov	r0, r23
 154:	16 f4       	brtc	.+4      	; 0x15a <__divmodhi4+0xa>
 156:	00 94       	com	r0
 158:	07 d0       	rcall	.+14     	; 0x168 <__divmodhi4_neg1>
 15a:	77 fd       	sbrc	r23, 7
 15c:	09 d0       	rcall	.+18     	; 0x170 <__divmodhi4_neg2>
 15e:	0e 94 bc 00 	call	0x178	; 0x178 <__udivmodhi4>
 162:	07 fc       	sbrc	r0, 7
 164:	05 d0       	rcall	.+10     	; 0x170 <__divmodhi4_neg2>
 166:	3e f4       	brtc	.+14     	; 0x176 <__divmodhi4_exit>

00000168 <__divmodhi4_neg1>:
 168:	90 95       	com	r25
 16a:	81 95       	neg	r24
 16c:	9f 4f       	sbci	r25, 0xFF	; 255
 16e:	08 95       	ret

00000170 <__divmodhi4_neg2>:
 170:	70 95       	com	r23
 172:	61 95       	neg	r22
 174:	7f 4f       	sbci	r23, 0xFF	; 255

00000176 <__divmodhi4_exit>:
 176:	08 95       	ret

00000178 <__udivmodhi4>:
 178:	aa 1b       	sub	r26, r26
 17a:	bb 1b       	sub	r27, r27
 17c:	51 e1       	ldi	r21, 0x11	; 17
 17e:	07 c0       	rjmp	.+14     	; 0x18e <__udivmodhi4_ep>

00000180 <__udivmodhi4_loop>:
 180:	aa 1f       	adc	r26, r26
 182:	bb 1f       	adc	r27, r27
 184:	a6 17       	cp	r26, r22
 186:	b7 07       	cpc	r27, r23
 188:	10 f0       	brcs	.+4      	; 0x18e <__udivmodhi4_ep>
 18a:	a6 1b       	sub	r26, r22
 18c:	b7 0b       	sbc	r27, r23

0000018e <__udivmodhi4_ep>:
 18e:	88 1f       	adc	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	5a 95       	dec	r21
 194:	a9 f7       	brne	.-22     	; 0x180 <__udivmodhi4_loop>
 196:	80 95       	com	r24
 198:	90 95       	com	r25
 19a:	bc 01       	movw	r22, r24
 19c:	cd 01       	movw	r24, r26
 19e:	08 95       	ret

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
