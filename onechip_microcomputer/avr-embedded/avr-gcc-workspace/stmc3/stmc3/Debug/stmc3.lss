
stmc3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000122  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000018a  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000100  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000142  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  00000540  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000018c  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000150  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
	unsigned char off = 0;
	int x = 0;
	int x_old = 0;
	int state = 0;

	DDRB = _BV(DDB5);
  80:	80 e2       	ldi	r24, 0x20	; 32
  82:	84 b9       	out	0x04, r24	; 4
	DDRD = _BV(DDD5);
  84:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;
  86:	1b b8       	out	0x0b, r1	; 11
{
	unsigned char on = _BV(PORTB5);
	unsigned char off = 0;
	int x = 0;
	int x_old = 0;
	int state = 0;
  88:	40 e0       	ldi	r20, 0x00	; 0
  8a:	50 e0       	ldi	r21, 0x00	; 0
int main(int argc, char* argv[])
{
	unsigned char on = _BV(PORTB5);
	unsigned char off = 0;
	int x = 0;
	int x_old = 0;
  8c:	20 e0       	ldi	r18, 0x00	; 0
  8e:	30 e0       	ldi	r19, 0x00	; 0

	while (1) {
		x = bit_is_set(PIND, PIND5);

		if (x && !x_old) {
			state = 1 - state;
  90:	61 e0       	ldi	r22, 0x01	; 1
  92:	70 e0       	ldi	r23, 0x00	; 0
		}

		x_old = x;

		if(state){
			PORTB = on;
  94:	e0 e2       	ldi	r30, 0x20	; 32
  96:	01 c0       	rjmp	.+2      	; 0x9a <main+0x1a>
  98:	9c 01       	movw	r18, r24
	DDRB = _BV(DDB5);
	DDRD = _BV(DDD5);
	PORTD = 0;

	while (1) {
		x = bit_is_set(PIND, PIND5);
  9a:	89 b1       	in	r24, 0x09	; 9
  9c:	80 72       	andi	r24, 0x20	; 32
  9e:	90 e0       	ldi	r25, 0x00	; 0

		if (x && !x_old) {
  a0:	00 97       	sbiw	r24, 0x00	; 0
  a2:	61 f0       	breq	.+24     	; 0xbc <main+0x3c>
  a4:	23 2b       	or	r18, r19
  a6:	51 f4       	brne	.+20     	; 0xbc <main+0x3c>
			state = 1 - state;
  a8:	9b 01       	movw	r18, r22
  aa:	24 1b       	sub	r18, r20
  ac:	35 0b       	sbc	r19, r21
  ae:	a9 01       	movw	r20, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	af e3       	ldi	r26, 0x3F	; 63
  b2:	bc e9       	ldi	r27, 0x9C	; 156
  b4:	11 97       	sbiw	r26, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <main+0x34>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x3a>
  ba:	00 00       	nop
			_delay_ms(10);
		}

		x_old = x;

		if(state){
  bc:	41 15       	cp	r20, r1
  be:	51 05       	cpc	r21, r1
  c0:	11 f0       	breq	.+4      	; 0xc6 <main+0x46>
			PORTB = on;
  c2:	e5 b9       	out	0x05, r30	; 5
  c4:	e9 cf       	rjmp	.-46     	; 0x98 <main+0x18>
			} else {
			PORTB = off;
  c6:	15 b8       	out	0x05, r1	; 5
  c8:	e7 cf       	rjmp	.-50     	; 0x98 <main+0x18>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
