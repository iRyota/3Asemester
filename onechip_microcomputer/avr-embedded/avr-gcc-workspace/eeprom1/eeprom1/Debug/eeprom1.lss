
eeprom1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000122  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000169  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000109  00000000  00000000  000002db  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000142  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  00000528  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000194  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000007a  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  0000075a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>

int main(int argc, char* argv[])
{
  80:	84 e1       	ldi	r24, 0x14	; 20
  82:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	2f ef       	ldi	r18, 0xFF	; 255
  86:	31 ee       	ldi	r19, 0xE1	; 225
  88:	44 e0       	ldi	r20, 0x04	; 4
  8a:	21 50       	subi	r18, 0x01	; 1
  8c:	30 40       	sbci	r19, 0x00	; 0
  8e:	40 40       	sbci	r20, 0x00	; 0
  90:	e1 f7       	brne	.-8      	; 0x8a <main+0xa>
  92:	00 c0       	rjmp	.+0      	; 0x94 <main+0x14>
  94:	00 00       	nop
  96:	01 97       	sbiw	r24, 0x01	; 1
	
	unsigned char numberOfBoots;

	int i = 0;

	for(i = 0; i < 20; i++){
  98:	00 97       	sbiw	r24, 0x00	; 0
  9a:	a1 f7       	brne	.-24     	; 0x84 <main+0x4>
		_delay_ms(100.);
	}
	
	//書き込みが行われている状態かを確認し
	//読み書き可能な状況まで待機。
	while(EECR & _BV(EEPE)){
  9c:	f9 99       	sbic	0x1f, 1	; 31
  9e:	fe cf       	rjmp	.-4      	; 0x9c <main+0x1c>
	}

	EEAR = 0x00;//EEPROMのアドレスを設定。0から0x3FF
  a0:	12 bc       	out	0x22, r1	; 34
  a2:	11 bc       	out	0x21, r1	; 33
	EECR |= _BV(EERE);//読み込みを開始
  a4:	f8 9a       	sbi	0x1f, 0	; 31


	//EEPROMのEEARアドレス番地の中身を取得。
	numberOfBoots = EEDR;
  a6:	80 b5       	in	r24, 0x20	; 32

	numberOfBoots++;
  a8:	8f 5f       	subi	r24, 0xFF	; 255

	if(numberOfBoots > 15){
  aa:	80 31       	cpi	r24, 0x10	; 16
  ac:	08 f0       	brcs	.+2      	; 0xb0 <main+0x30>
		numberOfBoots = 0;
  ae:	80 e0       	ldi	r24, 0x00	; 0
	}

	while(EECR & _BV(EEPE)){
  b0:	f9 99       	sbic	0x1f, 1	; 31
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <main+0x30>
	}

	EEAR = 0x00;
  b4:	12 bc       	out	0x22, r1	; 34
  b6:	11 bc       	out	0x21, r1	; 33
	EEDR = numberOfBoots;
  b8:	80 bd       	out	0x20, r24	; 32
	EECR |= _BV(EEMPE);
  ba:	fa 9a       	sbi	0x1f, 2	; 31

	EECR |= _BV(EEPE);
  bc:	f9 9a       	sbi	0x1f, 1	; 31


	DDRB = _BV(DDB5) | _BV(DDB4) | _BV(DDB3) | _BV(DDB2);
  be:	9c e3       	ldi	r25, 0x3C	; 60
  c0:	94 b9       	out	0x04, r25	; 4

	PORTB = numberOfBoots  << 2;
  c2:	88 0f       	add	r24, r24
  c4:	88 0f       	add	r24, r24
  c6:	85 b9       	out	0x05, r24	; 5
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <main+0x48>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
