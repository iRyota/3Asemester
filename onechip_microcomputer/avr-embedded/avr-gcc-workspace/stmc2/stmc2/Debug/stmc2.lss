
stmc2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000010a  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000009a  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000c0  00000000  00000000  0000030a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  000003cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000141  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000e8  00000000  00000000  00000531  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  00000619  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
	unsigned char off = 0;
	int x = 0;
	int x_old = 0;
	int state = 0;

	DDRB = _BV(DDB5);
  80:	80 e2       	ldi	r24, 0x20	; 32
  82:	84 b9       	out	0x04, r24	; 4
	DDRD = _BV(DDD5);
  84:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;
  86:	1b b8       	out	0x0b, r1	; 11
{
	unsigned char on = _BV(PORTB5);
	unsigned char off = 0;
	int x = 0;
	int x_old = 0;
	int state = 0;
  88:	20 e0       	ldi	r18, 0x00	; 0
  8a:	30 e0       	ldi	r19, 0x00	; 0
int main(int argc, char* argv[])
{
	unsigned char on = _BV(PORTB5);
	unsigned char off = 0;
	int x = 0;
	int x_old = 0;
  8c:	40 e0       	ldi	r20, 0x00	; 0
  8e:	50 e0       	ldi	r21, 0x00	; 0

	while (1) {
		x = bit_is_set(PIND, PIND5);

		if (x && !x_old) {
			state = 1 - state;
  90:	61 e0       	ldi	r22, 0x01	; 1
  92:	70 e0       	ldi	r23, 0x00	; 0
		}

		x_old = x;

		if(state){
			PORTB = on;
  94:	e0 e2       	ldi	r30, 0x20	; 32
  96:	01 c0       	rjmp	.+2      	; 0x9a <main+0x1a>
  98:	ac 01       	movw	r20, r24
	DDRB = _BV(DDB5);
	DDRD = _BV(DDD5);
	PORTD = 0;

	while (1) {
		x = bit_is_set(PIND, PIND5);
  9a:	89 b1       	in	r24, 0x09	; 9
  9c:	80 72       	andi	r24, 0x20	; 32
  9e:	90 e0       	ldi	r25, 0x00	; 0

		if (x && !x_old) {
  a0:	00 97       	sbiw	r24, 0x00	; 0
  a2:	31 f0       	breq	.+12     	; 0xb0 <main+0x30>
  a4:	45 2b       	or	r20, r21
  a6:	21 f4       	brne	.+8      	; 0xb0 <main+0x30>
			state = 1 - state;
  a8:	ab 01       	movw	r20, r22
  aa:	42 1b       	sub	r20, r18
  ac:	53 0b       	sbc	r21, r19
  ae:	9a 01       	movw	r18, r20
		}

		x_old = x;

		if(state){
  b0:	21 15       	cp	r18, r1
  b2:	31 05       	cpc	r19, r1
  b4:	11 f0       	breq	.+4      	; 0xba <main+0x3a>
			PORTB = on;
  b6:	e5 b9       	out	0x05, r30	; 5
  b8:	ef cf       	rjmp	.-34     	; 0x98 <main+0x18>
			} else {
			PORTB = off;
  ba:	15 b8       	out	0x05, r1	; 5
  bc:	ed cf       	rjmp	.-38     	; 0x98 <main+0x18>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
