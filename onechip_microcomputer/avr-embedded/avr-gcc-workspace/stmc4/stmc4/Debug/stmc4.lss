
stmc4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000175  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000fa  00000000  00000000  00000309  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000146  00000000  00000000  00000403  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  0000054c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000019c  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000f4  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
{
	int counter = 0;
	int x = 0;
	int x_old = 0;

	DDRB = _BV(DDB5) | _BV(DDB4) | _BV(DDB3) | _BV(DDB2);
  80:	8c e3       	ldi	r24, 0x3C	; 60
  82:	84 b9       	out	0x04, r24	; 4
	DDRD = _BV(PIND2) | _BV(PIND3) | _BV(PIND4) | _BV(PIND5);
  84:	8a b9       	out	0x0a, r24	; 10
	PORTB = 0b00000000;
  86:	15 b8       	out	0x05, r1	; 5

int main(int argc, char* argv[])
{
	int counter = 0;
	int x = 0;
	int x_old = 0;
  88:	20 e0       	ldi	r18, 0x00	; 0
  8a:	30 e0       	ldi	r19, 0x00	; 0
#include <avr/io.h>
#include <util/delay.h>

int main(int argc, char* argv[])
{
	int counter = 0;
  8c:	40 e0       	ldi	r20, 0x00	; 0
  8e:	50 e0       	ldi	r21, 0x00	; 0
			_delay_ms(20);
			if (counter>4){
				PORTB = 0b00000000;
				counter = 0;
			} else {
				PORTB += _BV(1 + counter);
  90:	61 e0       	ldi	r22, 0x01	; 1
  92:	70 e0       	ldi	r23, 0x00	; 0
		if (x && !x_old){
			counter++;
			_delay_ms(20);
			if (counter>4){
				PORTB = 0b00000000;
				counter = 0;
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	01 c0       	rjmp	.+2      	; 0x9c <main+0x1c>
  9a:	9c 01       	movw	r18, r24
	DDRB = _BV(DDB5) | _BV(DDB4) | _BV(DDB3) | _BV(DDB2);
	DDRD = _BV(PIND2) | _BV(PIND3) | _BV(PIND4) | _BV(PIND5);
	PORTB = 0b00000000;
	
	while (1) {
		x = bit_is_set(PIND, PIND5);
  9c:	89 b1       	in	r24, 0x09	; 9
  9e:	80 72       	andi	r24, 0x20	; 32
  a0:	90 e0       	ldi	r25, 0x00	; 0
		
		if (x && !x_old){
  a2:	00 97       	sbiw	r24, 0x00	; 0
  a4:	d1 f3       	breq	.-12     	; 0x9a <main+0x1a>
  a6:	23 2b       	or	r18, r19
  a8:	c1 f7       	brne	.-16     	; 0x9a <main+0x1a>
			counter++;
  aa:	9a 01       	movw	r18, r20
  ac:	2f 5f       	subi	r18, 0xFF	; 255
  ae:	3f 4f       	sbci	r19, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	bf ef       	ldi	r27, 0xFF	; 255
  b2:	c9 ef       	ldi	r28, 0xF9	; 249
  b4:	d0 e0       	ldi	r29, 0x00	; 0
  b6:	b1 50       	subi	r27, 0x01	; 1
  b8:	c0 40       	sbci	r28, 0x00	; 0
  ba:	d0 40       	sbci	r29, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x36>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x40>
  c0:	00 00       	nop
			_delay_ms(20);
			if (counter>4){
  c2:	25 30       	cpi	r18, 0x05	; 5
  c4:	31 05       	cpc	r19, r1
  c6:	24 f0       	brlt	.+8      	; 0xd0 <main+0x50>
				PORTB = 0b00000000;
  c8:	15 b8       	out	0x05, r1	; 5
				counter = 0;
  ca:	4a 2f       	mov	r20, r26
  cc:	5f 2f       	mov	r21, r31
  ce:	e5 cf       	rjmp	.-54     	; 0x9a <main+0x1a>
			} else {
				PORTB += _BV(1 + counter);
  d0:	e5 b1       	in	r30, 0x05	; 5
  d2:	4e 5f       	subi	r20, 0xFE	; 254
  d4:	5f 4f       	sbci	r21, 0xFF	; 255
  d6:	eb 01       	movw	r28, r22
  d8:	02 c0       	rjmp	.+4      	; 0xde <main+0x5e>
  da:	cc 0f       	add	r28, r28
  dc:	dd 1f       	adc	r29, r29
  de:	4a 95       	dec	r20
  e0:	e2 f7       	brpl	.-8      	; 0xda <main+0x5a>
  e2:	ae 01       	movw	r20, r28
  e4:	4e 0f       	add	r20, r30
  e6:	45 b9       	out	0x05, r20	; 5
	
	while (1) {
		x = bit_is_set(PIND, PIND5);
		
		if (x && !x_old){
			counter++;
  e8:	a9 01       	movw	r20, r18
  ea:	d7 cf       	rjmp	.-82     	; 0x9a <main+0x1a>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
