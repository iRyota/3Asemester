
timer1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000038  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000159  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000fc  00000000  00000000  000002cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000ed  00000000  00000000  000003cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000054  00000000  00000000  000004b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000016a  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000008c  00000000  00000000  00000676  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  00000702  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initialize_timer>:
}

void initialize_timer()
{
	//タイマーの設定
	TCCR0A = 0;
  80:	14 bc       	out	0x24, r1	; 36
	TCCR0B = _BV(CS02);// | _BV(CS00);  //1024分周比
  82:	84 e0       	ldi	r24, 0x04	; 4
  84:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0; //カウンタ値の初期化
  86:	16 bc       	out	0x26, r1	; 38
  88:	08 95       	ret

0000008a <blink_leds>:
}

void blink_leds(unsigned char status)
{
	PORTB = (status >> 4) << 2;
  8a:	82 95       	swap	r24
  8c:	8f 70       	andi	r24, 0x0F	; 15
  8e:	88 0f       	add	r24, r24
  90:	88 0f       	add	r24, r24
  92:	85 b9       	out	0x05, r24	; 5
  94:	08 95       	ret

00000096 <main>:

#include <avr/io.h>

void setup_io()
{
	DDRB = _BV(DDB5) | _BV(DDB4) | _BV(DDB3) | _BV(DDB2);
  96:	8c e3       	ldi	r24, 0x3C	; 60
  98:	84 b9       	out	0x04, r24	; 4
int main(int argc, char* argv[])
{
	unsigned char state = 0;

	setup_io();
	initialize_timer();
  9a:	0e 94 40 00 	call	0x80	; 0x80 <initialize_timer>
	PORTB = (status >> 4) << 2;
}

int main(int argc, char* argv[])
{
	unsigned char state = 0;
  9e:	c0 e0       	ldi	r28, 0x00	; 0

	setup_io();
	initialize_timer();

	while (1) {
		loop_until_bit_is_set(TIFR0, TOV0);
  a0:	a8 9b       	sbis	0x15, 0	; 21
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <main+0xa>
		blink_leds(++state);
  a4:	cf 5f       	subi	r28, 0xFF	; 255
  a6:	8c 2f       	mov	r24, r28
  a8:	0e 94 45 00 	call	0x8a	; 0x8a <blink_leds>
		//TIFR0 |= _BV(TOV0);
		TIFR0 &= 0b11111111;
  ac:	85 b3       	in	r24, 0x15	; 21
  ae:	85 bb       	out	0x15, r24	; 21
		TIFR0 &= 0b11111111;
  b0:	85 b3       	in	r24, 0x15	; 21
  b2:	85 bb       	out	0x15, r24	; 21
	}
  b4:	f5 cf       	rjmp	.-22     	; 0xa0 <main+0xa>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
