
usart1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  0000018e  00000202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001a3  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000ff  00000000  00000000  00000427  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000112  00000000  00000000  00000526  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000064  00000000  00000000  00000638  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000018b  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000e6  00000000  00000000  00000827  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  0000090d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e8       	ldi	r30, 0x8E	; 142
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 be 00 	call	0x17c	; 0x17c <main>
  8e:	0c 94 c5 00 	jmp	0x18a	; 0x18a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <setup>:

	return 0;
}

void setup() {
	UCSR0B = _BV(TXEN0) | _BV(RXEN0);//Rx Tx機能を有効化
  96:	88 e1       	ldi	r24, 0x18	; 24
  98:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
  9c:	86 e0       	ldi	r24, 0x06	; 6
  9e:	80 93 c2 00 	sts	0x00C2, r24

	UBRR0 = 51;//USART Baud Rate Register
  a2:	83 e3       	ldi	r24, 0x33	; 51
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	90 93 c5 00 	sts	0x00C5, r25
  aa:	80 93 c4 00 	sts	0x00C4, r24
  ae:	08 95       	ret

000000b0 <readData>:
	//baud rate = f_osc / 16 / (UBRR0 + 1)
	//baud rate = 19200
}

unsigned char readData(){
	while(!(UCSR0A & _BV(RXC0))){}
  b0:	e0 ec       	ldi	r30, 0xC0	; 192
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	88 23       	and	r24, r24
  b8:	ec f7       	brge	.-6      	; 0xb4 <readData+0x4>
	return UDR0;
  ba:	80 91 c6 00 	lds	r24, 0x00C6
}
  be:	08 95       	ret

000000c0 <sendData>:

void sendData(unsigned char value)
{
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
  c8:	69 97       	sbiw	r28, 0x19	; 25
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	f8 94       	cli
  ce:	de bf       	out	0x3e, r29	; 62
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	cd bf       	out	0x3d, r28	; 61
	char premessage[] = "I receive ";
  d4:	9b e0       	ldi	r25, 0x0B	; 11
  d6:	e0 e0       	ldi	r30, 0x00	; 0
  d8:	f1 e0       	ldi	r31, 0x01	; 1
  da:	de 01       	movw	r26, r28
  dc:	11 96       	adiw	r26, 0x01	; 1
  de:	01 90       	ld	r0, Z+
  e0:	0d 92       	st	X+, r0
  e2:	9a 95       	dec	r25
  e4:	e1 f7       	brne	.-8      	; 0xde <sendData+0x1e>
	int prelength = 10;
	char postmessage[] = " from Arduino";
  e6:	9e e0       	ldi	r25, 0x0E	; 14
  e8:	eb e0       	ldi	r30, 0x0B	; 11
  ea:	f1 e0       	ldi	r31, 0x01	; 1
  ec:	de 01       	movw	r26, r28
  ee:	1c 96       	adiw	r26, 0x0c	; 12
  f0:	01 90       	ld	r0, Z+
  f2:	0d 92       	st	X+, r0
  f4:	9a 95       	dec	r25
  f6:	e1 f7       	brne	.-8      	; 0xf0 <sendData+0x30>
  f8:	be 01       	movw	r22, r28
  fa:	6f 5f       	subi	r22, 0xFF	; 255
  fc:	7f 4f       	sbci	r23, 0xFF	; 255
  fe:	ae 01       	movw	r20, r28
 100:	45 5f       	subi	r20, 0xF5	; 245
 102:	5f 4f       	sbci	r21, 0xFF	; 255
	int postlength = 13;
	int i;

	for(i = 0; i < prelength; i++){
		while (!(UCSR0A & _BV(UDRE0))){}
 104:	e0 ec       	ldi	r30, 0xC0	; 192
 106:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = premessage[i];
 108:	26 ec       	ldi	r18, 0xC6	; 198
 10a:	30 e0       	ldi	r19, 0x00	; 0
	char postmessage[] = " from Arduino";
	int postlength = 13;
	int i;

	for(i = 0; i < prelength; i++){
		while (!(UCSR0A & _BV(UDRE0))){}
 10c:	90 81       	ld	r25, Z
 10e:	95 ff       	sbrs	r25, 5
 110:	fd cf       	rjmp	.-6      	; 0x10c <sendData+0x4c>
		UDR0 = premessage[i];
 112:	db 01       	movw	r26, r22
 114:	9d 91       	ld	r25, X+
 116:	bd 01       	movw	r22, r26
 118:	d9 01       	movw	r26, r18
 11a:	9c 93       	st	X, r25
	int prelength = 10;
	char postmessage[] = " from Arduino";
	int postlength = 13;
	int i;

	for(i = 0; i < prelength; i++){
 11c:	64 17       	cp	r22, r20
 11e:	75 07       	cpc	r23, r21
 120:	a9 f7       	brne	.-22     	; 0x10c <sendData+0x4c>
		while (!(UCSR0A & _BV(UDRE0))){}
		UDR0 = premessage[i];
		//while (!(UCSR0A & _BV(TXC0))){}
	}

	while (!(UCSR0A & _BV(UDRE0))){}
 122:	e0 ec       	ldi	r30, 0xC0	; 192
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	90 81       	ld	r25, Z
 128:	95 ff       	sbrs	r25, 5
 12a:	fd cf       	rjmp	.-6      	; 0x126 <sendData+0x66>
	UDR0 = value;
 12c:	80 93 c6 00 	sts	0x00C6, r24
 130:	be 01       	movw	r22, r28
 132:	64 5f       	subi	r22, 0xF4	; 244
 134:	7f 4f       	sbci	r23, 0xFF	; 255
 136:	9e 01       	movw	r18, r28
 138:	27 5e       	subi	r18, 0xE7	; 231
 13a:	3f 4f       	sbci	r19, 0xFF	; 255

	for(i = 0; i < postlength; i++){
		while (!(UCSR0A & _BV(UDRE0))){}
 13c:	e0 ec       	ldi	r30, 0xC0	; 192
 13e:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = postmessage[i];
 140:	86 ec       	ldi	r24, 0xC6	; 198
 142:	90 e0       	ldi	r25, 0x00	; 0

	while (!(UCSR0A & _BV(UDRE0))){}
	UDR0 = value;

	for(i = 0; i < postlength; i++){
		while (!(UCSR0A & _BV(UDRE0))){}
 144:	40 81       	ld	r20, Z
 146:	45 ff       	sbrs	r20, 5
 148:	fd cf       	rjmp	.-6      	; 0x144 <sendData+0x84>
		UDR0 = postmessage[i];
 14a:	db 01       	movw	r26, r22
 14c:	4d 91       	ld	r20, X+
 14e:	bd 01       	movw	r22, r26
 150:	dc 01       	movw	r26, r24
 152:	4c 93       	st	X, r20
	}

	while (!(UCSR0A & _BV(UDRE0))){}
	UDR0 = value;

	for(i = 0; i < postlength; i++){
 154:	62 17       	cp	r22, r18
 156:	73 07       	cpc	r23, r19
 158:	a9 f7       	brne	.-22     	; 0x144 <sendData+0x84>
		while (!(UCSR0A & _BV(UDRE0))){}
		UDR0 = postmessage[i];
	}

	while (!(UCSR0A & _BV(UDRE0))) {}
 15a:	e0 ec       	ldi	r30, 0xC0	; 192
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	85 ff       	sbrs	r24, 5
 162:	fd cf       	rjmp	.-6      	; 0x15e <sendData+0x9e>
	UDR0 = '\n';
 164:	8a e0       	ldi	r24, 0x0A	; 10
 166:	80 93 c6 00 	sts	0x00C6, r24
 16a:	69 96       	adiw	r28, 0x19	; 25
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	f8 94       	cli
 170:	de bf       	out	0x3e, r29	; 62
 172:	0f be       	out	0x3f, r0	; 63
 174:	cd bf       	out	0x3d, r28	; 61
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <main>:
void sendData(unsigned char value);
unsigned char readData();

int main(int argc, char* argv[])
{
	setup();
 17c:	0e 94 4b 00 	call	0x96	; 0x96 <setup>
	while (1) {
		sendData(readData());
 180:	0e 94 58 00 	call	0xb0	; 0xb0 <readData>
 184:	0e 94 60 00 	call	0xc0	; 0xc0 <sendData>
 188:	fb cf       	rjmp	.-10     	; 0x180 <main+0x4>

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
