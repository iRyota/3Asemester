
eeprom2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000100  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001e0  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000156  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001b7  00000000  00000000  000004da  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  00000694  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001b8  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000ab  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  0000091b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>

#include <avr/eeprom.h>

int main(int argc, char* argv[])
{
  80:	84 e1       	ldi	r24, 0x14	; 20
  82:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	2f ef       	ldi	r18, 0xFF	; 255
  86:	31 ee       	ldi	r19, 0xE1	; 225
  88:	44 e0       	ldi	r20, 0x04	; 4
  8a:	21 50       	subi	r18, 0x01	; 1
  8c:	30 40       	sbci	r19, 0x00	; 0
  8e:	40 40       	sbci	r20, 0x00	; 0
  90:	e1 f7       	brne	.-8      	; 0x8a <main+0xa>
  92:	00 c0       	rjmp	.+0      	; 0x94 <main+0x14>
  94:	00 00       	nop
  96:	01 97       	sbiw	r24, 0x01	; 1
	unsigned char numberOfBoots;
	int i = 0;

	for(i = 0; i < 20; i++){
  98:	00 97       	sbiw	r24, 0x00	; 0
  9a:	a1 f7       	brne	.-24     	; 0x84 <main+0x4>
		_delay_ms(100);
	}

	eeprom_busy_wait();/* 読み書き可能になるまで待つ */
  9c:	f9 99       	sbic	0x1f, 1	; 31
  9e:	fe cf       	rjmp	.-4      	; 0x9c <main+0x1c>
	numberOfBoots = eeprom_read_byte(0x00); /* EEPROMの0番地の値を読み出す */
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 68 00 	call	0xd0	; 0xd0 <__eerd_byte_m328p>

	numberOfBoots++;
  a8:	c1 e0       	ldi	r28, 0x01	; 1
  aa:	c8 0f       	add	r28, r24

	if(numberOfBoots > 15){
  ac:	c0 31       	cpi	r28, 0x10	; 16
  ae:	08 f0       	brcs	.+2      	; 0xb2 <main+0x32>
		numberOfBoots = 0;
  b0:	c0 e0       	ldi	r28, 0x00	; 0
	}

	eeprom_busy_wait();/* 読み書き可能になるまで待つ */
  b2:	f9 99       	sbic	0x1f, 1	; 31
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <main+0x32>
	eeprom_write_byte(0x00, numberOfBoots);/* 値0xAAをEEPROMの0番地に書き込む */
  b6:	6c 2f       	mov	r22, r28
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 70 00 	call	0xe0	; 0xe0 <__eewr_byte_m328p>

	eeprom_busy_wait();/* 読み書き可能になるまで待つ */
  c0:	f9 99       	sbic	0x1f, 1	; 31
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <main+0x40>

	DDRB = _BV(DDB5) | _BV(DDB4) | _BV(DDB3) | _BV(DDB2);
  c4:	8c e3       	ldi	r24, 0x3C	; 60
  c6:	84 b9       	out	0x04, r24	; 4

	PORTB = numberOfBoots  << 2;
  c8:	cc 0f       	add	r28, r28
  ca:	cc 0f       	add	r28, r28
  cc:	c5 b9       	out	0x05, r28	; 5
  ce:	ff cf       	rjmp	.-2      	; 0xce <main+0x4e>

000000d0 <__eerd_byte_m328p>:
  d0:	f9 99       	sbic	0x1f, 1	; 31
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <__eerd_byte_m328p>
  d4:	92 bd       	out	0x22, r25	; 34
  d6:	81 bd       	out	0x21, r24	; 33
  d8:	f8 9a       	sbi	0x1f, 0	; 31
  da:	99 27       	eor	r25, r25
  dc:	80 b5       	in	r24, 0x20	; 32
  de:	08 95       	ret

000000e0 <__eewr_byte_m328p>:
  e0:	26 2f       	mov	r18, r22

000000e2 <__eewr_r18_m328p>:
  e2:	f9 99       	sbic	0x1f, 1	; 31
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <__eewr_r18_m328p>
  e6:	1f ba       	out	0x1f, r1	; 31
  e8:	92 bd       	out	0x22, r25	; 34
  ea:	81 bd       	out	0x21, r24	; 33
  ec:	20 bd       	out	0x20, r18	; 32
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	f8 94       	cli
  f2:	fa 9a       	sbi	0x1f, 2	; 31
  f4:	f9 9a       	sbi	0x1f, 1	; 31
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	08 95       	ret

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
