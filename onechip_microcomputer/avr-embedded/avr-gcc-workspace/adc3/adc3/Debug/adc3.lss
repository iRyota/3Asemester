
adc3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000048  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001a3  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000013c  00000000  00000000  00000439  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000011f  00000000  00000000  00000575  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000cc  00000000  00000000  00000694  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000173  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000246  00000000  00000000  000008d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000050  00000000  00000000  00000b19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_16>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_21>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 a8 00 	call	0x150	; 0x150 <main>
  78:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <output>:
	DDRB = _BV(PB5) | _BV(PB4) | _BV(PB3) | _BV(PB2);
}

void output(int n)
{
	int res = (n + 102) / 204;
  80:	8a 59       	subi	r24, 0x9A	; 154
  82:	9f 4f       	sbci	r25, 0xFF	; 255
  84:	6c ec       	ldi	r22, 0xCC	; 204
  86:	70 e0       	ldi	r23, 0x00	; 0
  88:	0e 94 bb 00 	call	0x176	; 0x176 <__divmodhi4>
  8c:	cb 01       	movw	r24, r22

	if (res == 0) {
  8e:	00 97       	sbiw	r24, 0x00	; 0
  90:	21 f0       	breq	.+8      	; 0x9a <output+0x1a>
		PORTB = 0;
		} else {
		int i = 0;
		int outcode = 0;
		for (i = 0; i < res; i++) {
  92:	2c f4       	brge	.+10     	; 0x9e <output+0x1e>
  94:	20 e0       	ldi	r18, 0x00	; 0
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	1b c0       	rjmp	.+54     	; 0xd0 <output+0x50>
void output(int n)
{
	int res = (n + 102) / 204;

	if (res == 0) {
		PORTB = 0;
  9a:	15 b8       	out	0x05, r1	; 5
  9c:	08 95       	ret
  9e:	61 50       	subi	r22, 0x01	; 1
  a0:	71 09       	sbc	r23, r1
		} else {
		int i = 0;
		int outcode = 0;
		for (i = 0; i < res; i++) {
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	9f ef       	ldi	r25, 0xFF	; 255
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	30 e0       	ldi	r19, 0x00	; 0
			outcode = outcode | (1 << (i - 1)) << 2;
  aa:	e1 e0       	ldi	r30, 0x01	; 1
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	af 01       	movw	r20, r30
  b0:	08 2e       	mov	r0, r24
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <output+0x38>
  b4:	44 0f       	add	r20, r20
  b6:	55 1f       	adc	r21, r21
  b8:	0a 94       	dec	r0
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <output+0x34>
  bc:	44 0f       	add	r20, r20
  be:	55 1f       	adc	r21, r21
  c0:	44 0f       	add	r20, r20
  c2:	55 1f       	adc	r21, r21
  c4:	24 2b       	or	r18, r20
  c6:	35 2b       	or	r19, r21
  c8:	01 96       	adiw	r24, 0x01	; 1
	if (res == 0) {
		PORTB = 0;
		} else {
		int i = 0;
		int outcode = 0;
		for (i = 0; i < res; i++) {
  ca:	86 17       	cp	r24, r22
  cc:	97 07       	cpc	r25, r23
  ce:	79 f7       	brne	.-34     	; 0xae <output+0x2e>
			outcode = outcode | (1 << (i - 1)) << 2;
		}
		PORTB = outcode;
  d0:	25 b9       	out	0x05, r18	; 5
  d2:	08 95       	ret

000000d4 <__vector_21>:
	}
}

ISR(ADC_vect)
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	2f 93       	push	r18
  e0:	3f 93       	push	r19
  e2:	4f 93       	push	r20
  e4:	5f 93       	push	r21
  e6:	6f 93       	push	r22
  e8:	7f 93       	push	r23
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
  ee:	af 93       	push	r26
  f0:	bf 93       	push	r27
  f2:	ef 93       	push	r30
  f4:	ff 93       	push	r31
	output(ADC);
  f6:	80 91 78 00 	lds	r24, 0x0078
  fa:	90 91 79 00 	lds	r25, 0x0079
  fe:	0e 94 40 00 	call	0x80	; 0x80 <output>
}
 102:	ff 91       	pop	r31
 104:	ef 91       	pop	r30
 106:	bf 91       	pop	r27
 108:	af 91       	pop	r26
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	7f 91       	pop	r23
 110:	6f 91       	pop	r22
 112:	5f 91       	pop	r21
 114:	4f 91       	pop	r20
 116:	3f 91       	pop	r19
 118:	2f 91       	pop	r18
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <__vector_16>:

ISR(TIMER0_OVF_vect){
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	8f 93       	push	r24
	TCNT0 = 99;
 130:	83 e6       	ldi	r24, 0x63	; 99
 132:	86 bd       	out	0x26, r24	; 38
}
 134:	8f 91       	pop	r24
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <initialize_timer>:

void initialize_timer()
{
	//タイマーの設定
	TCCR0A = 0;
 140:	14 bc       	out	0x24, r1	; 36
	TCCR0B = _BV(CS02) | _BV(CS00);  //1/1024分周比
 142:	85 e0       	ldi	r24, 0x05	; 5
 144:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;//カウンタ値の初期化
 146:	16 bc       	out	0x26, r1	; 38
	TIMSK0 = _BV(TOIE0);//オーバーフロー割り込み許可を設定
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	80 93 6e 00 	sts	0x006E, r24
 14e:	08 95       	ret

00000150 <main>:
#include <avr/io.h>
#include <avr/interrupt.h>

void setup_io()
{
	DDRB = _BV(PB5) | _BV(PB4) | _BV(PB3) | _BV(PB2);
 150:	8c e3       	ldi	r24, 0x3C	; 60
 152:	84 b9       	out	0x04, r24	; 4

int main(int argc, char* argv[])
{
	setup_io();

	initialize_timer();
 154:	0e 94 a0 00 	call	0x140	; 0x140 <initialize_timer>

ADCSRA = _BV(ADEN) | _BV(ADPS2)|_BV(ADATE)| _BV(ADIE);
 158:	ea e7       	ldi	r30, 0x7A	; 122
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	8c ea       	ldi	r24, 0xAC	; 172
 15e:	80 83       	st	Z, r24
	//AD変換を許容、プリスケーラの設定、AD変換割り込みの許可、オートトリガモード設定
	ADCSRB = _BV(ADTS2);//トリガーソースはタイマー0オーバーフロー割り込み
 160:	84 e0       	ldi	r24, 0x04	; 4
 162:	80 93 7b 00 	sts	0x007B, r24

	ADMUX = _BV(REFS0);//基準電圧の設定
 166:	80 e4       	ldi	r24, 0x40	; 64
 168:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= _BV(ADSC);//AD変換の開始
 16c:	80 81       	ld	r24, Z
 16e:	80 64       	ori	r24, 0x40	; 64
 170:	80 83       	st	Z, r24

	sei();
 172:	78 94       	sei
 174:	ff cf       	rjmp	.-2      	; 0x174 <main+0x24>

00000176 <__divmodhi4>:
 176:	97 fb       	bst	r25, 7
 178:	07 2e       	mov	r0, r23
 17a:	16 f4       	brtc	.+4      	; 0x180 <__divmodhi4+0xa>
 17c:	00 94       	com	r0
 17e:	07 d0       	rcall	.+14     	; 0x18e <__divmodhi4_neg1>
 180:	77 fd       	sbrc	r23, 7
 182:	09 d0       	rcall	.+18     	; 0x196 <__divmodhi4_neg2>
 184:	0e 94 cf 00 	call	0x19e	; 0x19e <__udivmodhi4>
 188:	07 fc       	sbrc	r0, 7
 18a:	05 d0       	rcall	.+10     	; 0x196 <__divmodhi4_neg2>
 18c:	3e f4       	brtc	.+14     	; 0x19c <__divmodhi4_exit>

0000018e <__divmodhi4_neg1>:
 18e:	90 95       	com	r25
 190:	81 95       	neg	r24
 192:	9f 4f       	sbci	r25, 0xFF	; 255
 194:	08 95       	ret

00000196 <__divmodhi4_neg2>:
 196:	70 95       	com	r23
 198:	61 95       	neg	r22
 19a:	7f 4f       	sbci	r23, 0xFF	; 255

0000019c <__divmodhi4_exit>:
 19c:	08 95       	ret

0000019e <__udivmodhi4>:
 19e:	aa 1b       	sub	r26, r26
 1a0:	bb 1b       	sub	r27, r27
 1a2:	51 e1       	ldi	r21, 0x11	; 17
 1a4:	07 c0       	rjmp	.+14     	; 0x1b4 <__udivmodhi4_ep>

000001a6 <__udivmodhi4_loop>:
 1a6:	aa 1f       	adc	r26, r26
 1a8:	bb 1f       	adc	r27, r27
 1aa:	a6 17       	cp	r26, r22
 1ac:	b7 07       	cpc	r27, r23
 1ae:	10 f0       	brcs	.+4      	; 0x1b4 <__udivmodhi4_ep>
 1b0:	a6 1b       	sub	r26, r22
 1b2:	b7 0b       	sbc	r27, r23

000001b4 <__udivmodhi4_ep>:
 1b4:	88 1f       	adc	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	5a 95       	dec	r21
 1ba:	a9 f7       	brne	.-22     	; 0x1a6 <__udivmodhi4_loop>
 1bc:	80 95       	com	r24
 1be:	90 95       	com	r25
 1c0:	bc 01       	movw	r22, r24
 1c2:	cd 01       	movw	r24, r26
 1c4:	08 95       	ret

000001c6 <_exit>:
 1c6:	f8 94       	cli

000001c8 <__stop_program>:
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <__stop_program>
